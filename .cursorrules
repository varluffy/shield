# UltraFit - Go微服务开发规则

这是一个基于Gin框架、Wire依赖注入和GORM数据库的Go微服务项目。

## 📚 规则文档结构

本项目采用模块化的规则管理，请根据具体需求参考相应的规则文档：

### 🏗️ 核心架构规则
参考：`docs/architecture/go-microservices-core.md`
- 清洁架构设计原则
- 项目结构标准
- 开发最佳实践
- 可观测性核心要求
- 错误处理和安全规范

### 🌐 Gin Web框架规则
参考：`docs/frameworks/go-gin-web.md`
- 路由设计和Handler实现
- 中间件最佳实践
- 请求/响应处理标准
- 错误处理机制
- 性能优化策略

### 🔧 Wire依赖注入规则
参考：`docs/frameworks/go-wire-di.md`
- Provider设计模式
- 接口驱动的依赖注入
- Wire配置和代码生成
- 测试中的依赖管理
- 常见问题解决方案

### 🗄️ GORM数据库规则
参考：`docs/frameworks/go-gorm-database.md`
- Repository模式实现
- 模型定义和关系设计
- 事务处理和性能优化
- 查询安全和最佳实践
- 数据库配置和迁移

### 📊 可观测性和日志规则
参考：`docs/frameworks/go-observability-logging.md`
- Zap日志框架配置和使用
- OpenTelemetry + Jaeger追踪集成
- 中间件TraceID自动注入
- 结构化日志和追踪关联
- GORM数据库操作追踪

### ⚙️ 配置管理规则
参考：`docs/frameworks/go-viper-config.md`
- Viper多配置源管理
- 结构化配置绑定和验证
- 环境特定配置和敏感信息处理
- 配置热更新和Wire集成
- 配置文件模板和最佳实践

### 📝 开发流程规范
参考：`docs/guides/development-workflow.md`
- 需求驱动开发和变更管理
- 代码审查和测试策略
- 变更分类和风险评估
- 例外情况处理流程
- 技术债务和重构规则

### 🛡️ 架构一致性保护规则
参考：`docs/guides/architecture-compliance.md`
- 分层架构强制检查和防护
- Wire依赖注入一致性验证
- 文档示例与代码架构同步
- 配置管理字段统一性规则
- 自动化检查和违规修复流程

## 🎯 技术栈

- **Web框架**: Gin
- **依赖注入**: Wire
- **ORM**: GORM
- **数据库**: MySQL
- **日志**: Zap + OpenTelemetry
- **追踪**: Jaeger
- **配置**: Viper
- **测试**: Testify + Gomock

## 🚀 快速开始原则

1. **架构优先**: 始终遵循清洁架构原则，保持层次分离
2. **接口驱动**: 使用接口定义契约，通过Wire进行依赖注入
3. **测试驱动**: 为每个组件编写单元测试，使用Mock进行隔离测试
4. **性能优先**: 关注数据库查询性能，避免N+1问题
5. **安全第一**: 严格验证输入，使用参数化查询，保护敏感数据

## 📋 代码审查检查清单

### Handler层
- [ ] 是否只处理HTTP层逻辑，不包含业务逻辑？
- [ ] 是否正确使用参数绑定和验证？
- [ ] 是否实现了统一的错误处理？
- [ ] 是否将Context正确传递给Service层？

### Service层
- [ ] 是否实现了接口定义？
- [ ] 是否正确处理业务逻辑和错误？
- [ ] 是否使用Context进行超时控制？
- [ ] 是否正确使用事务处理？

### Repository层
- [ ] 是否使用Repository模式封装数据访问？
- [ ] 是否避免了N+1查询问题？
- [ ] 是否使用了参数化查询防止SQL注入？
- [ ] 是否正确处理了GORM错误？

### Wire配置
- [ ] 是否返回接口类型而非具体实现？
- [ ] 是否正确绑定接口到实现？
- [ ] 是否避免了循环依赖？
- [ ] 是否为测试创建了专门的Provider？

### 可观测性检查
- [ ] 是否在所有日志中自动注入了TraceID？
- [ ] 是否正确传递了Context到各个层级？
- [ ] 是否为关键业务操作创建了自定义span？
- [ ] 是否使用结构化日志格式？

### 配置管理检查
- [ ] 是否使用结构化配置绑定？
- [ ] 是否为所有配置项设置了默认值？
- [ ] 是否正确处理了敏感信息？
- [ ] 是否实现了配置验证？

### 开发流程检查
- [ ] 是否只针对明确需求进行修改？
- [ ] 是否经过了适当级别的代码审查？
- [ ] 是否通过了相应的测试验证？
- [ ] 是否更新了相关文档？
- [ ] 是否遵循了变更范围限制？

### 架构一致性检查
- [ ] 是否遵循了分层架构，没有跨层直接访问？
- [ ] 文档中的示例代码是否符合实际架构？
- [ ] Wire依赖注入是否使用了正确的接口绑定？
- [ ] 配置字段是否在所有相关文件中保持一致？
- [ ] 是否运行了架构一致性自动检查？

## 🔍 常用命令

```bash
# Wire代码生成
go generate ./...

# 运行测试
go test -v -cover ./...

# 代码格式化和检查
go fmt ./...
goimports -w .
golangci-lint run

# 数据库迁移
go run cmd/migrate/main.go

# 启动Jaeger（开发环境）
docker run -d --name jaeger \
  -p 16686:16686 \
  -p 14268:14268 \
  jaegertracing/all-in-one:latest

# 查看追踪日志
grep "trace_id" /var/log/app.log | jq .

# 使用指定配置文件启动
./app -config ./configs/config.prod.yaml

# 使用环境变量覆盖配置
ULTRAFIT_DB_PASSWORD=secret ULTRAFIT_ENV=production ./app
```

遵循这些规则将确保代码质量、可维护性、团队协作效率和完整的可观测性。 
// Package test contains simplified API tests using test helpers.
package test

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"gitlab.creditease.corp/aigc/ultrafit/internal/database"
	"gitlab.creditease.corp/aigc/ultrafit/internal/dto"
	"gitlab.creditease.corp/aigc/ultrafit/internal/routes"
	"gitlab.creditease.corp/aigc/ultrafit/pkg/errors"
	"gitlab.creditease.corp/aigc/ultrafit/pkg/response"
)

// TestAPIWithHelpers 使用test helpers的简化API测试
func TestAPIWithHelpers(t *testing.T) {
	// 设置测试环境
	gin.SetMode(gin.TestMode)

	// 使用helper创建测试配置和logger
	cfg := NewTestConfig()
	testLogger, err := NewTestLogger()
	assert.NoError(t, err)

	// 创建测试数据库连接
	db, err := database.NewMySQLConnection(cfg.Database, testLogger.Logger)
	if err != nil {
		t.Skipf("Skip test due to database connection error: %v", err)
		return
	}

	// 自动迁移
	if err := database.AutoMigrate(db); err != nil {
		t.Skipf("Skip test due to migration error: %v", err)
		return
	}

	// 🎯 使用helper函数创建所有组件 - 只需要一行代码！
	components := NewTestComponents(db, testLogger)

	// 设置路由
	router := routes.SetupRoutes(cfg, testLogger, components.UserHandler)

	t.Run("Test Create User Success", func(t *testing.T) {
		// 准备请求数据
		reqBody := dto.CreateUserRequest{
			Name:     "测试用户",
			Email:    "simplified@example.com",
			Password: "password123",
		}

		reqJSON, _ := json.Marshal(reqBody)
		req := httptest.NewRequest("POST", "/api/v1/users", bytes.NewBuffer(reqJSON))
		req.Header.Set("Content-Type", "application/json")

		// 执行请求
		w := httptest.NewRecorder()
		router.ServeHTTP(w, req)

		// 验证响应
		assert.Equal(t, http.StatusCreated, w.Code)

		var resp response.Response
		err := json.Unmarshal(w.Body.Bytes(), &resp)
		assert.NoError(t, err)

		// 验证统一响应格式
		assert.Equal(t, errors.CodeSuccess, resp.Code)
		assert.Equal(t, "created", resp.Message)
		assert.NotNil(t, resp.Data)
		assert.NotEmpty(t, resp.TraceID) // 验证TraceID存在

		t.Logf("成功响应: %+v", resp)
	})

	t.Run("Test Service Layer Directly", func(t *testing.T) {
		// 🎯 可以直接使用已创建的组件进行单元测试
		ctx := context.Background()

		createReq := dto.CreateUserRequest{
			Name:     "直接测试用户",
			Email:    "direct@example.com",
			Password: "password123",
		}

		userResp, err := components.UserService.CreateUser(ctx, createReq)

		// 验证Service层逻辑
		if err == nil {
			assert.NotNil(t, userResp)
			assert.Equal(t, createReq.Name, userResp.Name)
			assert.Equal(t, createReq.Email, userResp.Email)
			t.Logf("Service层测试成功: %+v", userResp)
		} else {
			t.Logf("Service层测试错误（预期的）: %v", err)
		}
	})

	t.Run("Test Repository Layer Directly", func(t *testing.T) {
		// 🎯 可以直接测试Repository层
		ctx := context.Background()

		filter := dto.UserFilter{
			Page:  1,
			Limit: 10,
		}

		users, total, err := components.UserRepo.List(ctx, filter)

		// 验证Repository层逻辑
		if err == nil {
			assert.NotNil(t, users)
			t.Logf("Repository层测试成功，用户数量: %d, 总数: %d", len(users), total)
		} else {
			t.Logf("Repository层测试错误（预期的）: %v", err)
		}
	})
}
